import os
import sys
from pathlib import Path
import re
import platform
from utils.logger import setup_logger

logger = setup_logger("test_workflow")

def get_python_command():
    """Get the appropriate Python command for the current platform"""
    if platform.system() == "Windows":
        return "python"
    else:
        return "python3"

def check_file_exists(filepath: str) -> bool:
    """Check if file exists"""
    exists = Path(filepath).exists()
    logger.info(f"Checking file {filepath}: {'exists' if exists else 'does not exist'}")
    return exists

def validate_readme_content(readme_path: str) -> bool:
    """Validate the content of generated README"""
    try:
        with open(readme_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Check for English headers
        required_headers = [
            "# Awesome Gaussian Splatting",
            "## Table of Contents",
            "## Classic Papers",
            "## Open Source Projects",
            "## Applications",
            "## Tutorials & Blogs",
            "## Contribution Guidelines",
            "## License"
        ]
        
        for header in required_headers:
            if header not in content:
                logger.error(f"Missing required header: {header}")
                return False
        
        # Check for Chinese characters (shouldn't exist in English version)
        if re.search(r'[\u4e00-\u9fff]', content):
            logger.error("Found Chinese characters in README")
            return False
            
        # Check for placeholder markers
        if "{{LAST_UPDATE}}" in content or "{{LATEST_PAPERS}}" in content:
            logger.error("Placeholders {{LAST_UPDATE}} and {{LATEST_PAPERS}} should not be in the final README")
            return False
            
        logger.info("README content validation passed")
        return True
        
    except Exception as e:
        logger.error(f"Error validating README: {str(e)}")
        return False

def run_workflow():
    logger.info("Starting workflow test")
    
    # Check necessary files
    if not check_file_exists("README_template.md"):
        logger.error("README template file does not exist")
        return False
    
    # Get platform-appropriate Python command
    python_cmd = get_python_command()
    
    # Run crawler
    logger.info("Running crawler...")
    result = os.system(f"{python_cmd} scripts/arxiv_crawler.py")
    if result != 0:
        logger.error("Crawler execution failed")
        return False
    
    # Check crawler output
    data_files = list(Path("data").glob("papers_*.json"))
    if not data_files:
        logger.error("No data files generated by crawler")
        return False
    logger.info(f"Found data files: {[f.name for f in data_files]}")
        
    # Run README generator
    logger.info("Generating README...")
    result = os.system(f"{python_cmd} scripts/readme_generator.py")
    if result != 0:
        logger.error("README generation failed")
        return False
    
    # Check generated README
    if not check_file_exists("README.md"):
        logger.error("README.md was not generated")
        return False
    
    # Validate README content
    if not validate_readme_content("README.md"):
        logger.error("README content validation failed")
        return False
    
    logger.info("Workflow test completed successfully")
    return True

if __name__ == "__main__":
    success = run_workflow()
    sys.exit(0 if success else 1) 